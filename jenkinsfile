pipeline {
    agent any
    
    environment {
        // Define environment variables
        APP_NAME = 'python-jenkins-demo'
        DOCKER_IMAGE = "${APP_NAME}"
        BUILD_VERSION = "${BUILD_NUMBER}"
        PYTHON_VERSION = '3.13'
    }
    
    options {
        // Keep only last 10 builds
        buildDiscarder(logRotator(numToKeepStr: '10'))
        
        // Timeout for entire pipeline
        timeout(time: 30, unit: 'MINUTES')
        
        // Timestamps in console output
        timestamps()
    }
    
    stages {
        stage('🚀 Initialize') {
            steps {
                echo '=' * 60
                echo '🚀 Starting Jenkins CI/CD Pipeline'
                echo '=' * 60
                echo "📋 Build Information:"
                echo "   → Project: ${APP_NAME}"
                echo "   → Build Number: ${BUILD_NUMBER}"
                echo "   → Build Version: ${BUILD_VERSION}"
                echo "   → Python Version: ${PYTHON_VERSION}"
                echo "   → Workspace: ${WORKSPACE}"
                echo '=' * 60
            }
        }
        
        stage('📥 Checkout Code') {
            steps {
                echo '📥 Checking out code from repository...'
                script {
                    // Git checkout happens automatically in Jenkins
                    sh 'ls -la'
                    sh 'pwd'
                }
                echo '✅ Code checkout completed successfully!'
            }
        }
        
        stage('🐍 Setup Python Environment') {
            steps {
                echo '🐍 Setting up Python environment...'
                sh '''
                    echo "Python version:"
                    python3 --version
                    
                    echo "Pip version:"
                    pip3 --version
                    
                    echo "Python path:"
                    which python3
                    
                    echo "Available Python modules:"
                    python3 -c "help('modules')" | head -20
                '''
                echo '✅ Python environment verified successfully!'
            }
        }
        
        stage('📦 Install Dependencies') {
            steps {
                echo '📦 Installing project dependencies...'
                sh '''
                    # Upgrade pip
                    python3 -m pip install --upgrade pip
                    
                    # Install development dependencies (if requirements.txt exists)
                    if [ -f "requirements.txt" ]; then
                        echo "Installing from requirements.txt..."
                        pip3 install -r requirements.txt
                    else
                        echo "No requirements.txt found. No external dependencies to install."
                    fi
                    
                    # Verify Python can import our modules
                    python3 -c "import app; print('✅ app.py imports successfully')"
                    python3 -c "import test_app; print('✅ test_app.py imports successfully')"
                '''
                echo '✅ Dependencies installed successfully!'
            }
        }
        
        stage('🔍 Code Quality Check') {
            parallel {
                stage('Syntax Check') {
                    steps {
                        echo '🔍 Performing Python syntax validation...'
                        sh '''
                            echo "Checking app.py syntax..."
                            python3 -m py_compile app.py
                            
                            echo "Checking test_app.py syntax..."
                            python3 -m py_compile test_app.py
                            
                            echo "✅ All Python files have valid syntax!"
                        '''
                    }
                }
                
                stage('Import Check') {
                    steps {
                        echo '🔍 Checking module imports...'
                        sh '''
                            echo "Testing imports..."
                            python3 -c "
import app
import test_app
print('✅ All imports successful!')
print(f'Functions in app: {[func for func in dir(app) if not func.startswith(\"_\")]}')
"
                        '''
                    }
                }
            }
        }
        
        stage('🧪 Run Unit Tests') {
            steps {
                echo '🧪 Executing comprehensive unit tests...'
                sh '''
                    echo "Running unit tests with detailed output..."
                    python3 test_app.py
                    
                    echo ""
                    echo "Running tests with unittest module for additional verification..."
                    python3 -m unittest test_app.py -v
                '''
                echo '✅ All unit tests passed successfully!'
            }
            post {
                always {
                    echo '📊 Unit test stage completed'
                }
            }
        }
        
        stage('🚀 Run Application') {
            steps {
                echo '🚀 Executing the main application...'
                sh '''
                    echo "Running the Python application..."
                    python3 app.py
                    
                    echo ""
                    echo "Application execution completed successfully!"
                '''
                echo '✅ Application executed successfully!'
            }
        }
        
        stage('🐳 Docker Operations') {
            stages {
                stage('Build Docker Image') {
                    steps {
                        echo '🐳 Building Docker image...'
                        script {
                            // Build Docker image with multiple tags
                            sh """
                                echo "Building Docker image: ${DOCKER_IMAGE}:${BUILD_VERSION}"
                                docker build -t ${DOCKER_IMAGE}:${BUILD_VERSION} .
                                
                                echo "Tagging as latest..."
                                docker build -t ${DOCKER_IMAGE}:latest .
                                
                                echo "Docker images built:"
                                docker images | grep ${DOCKER_IMAGE}
                            """
                        }
                        echo "✅ Docker image built successfully: ${DOCKER_IMAGE}:${BUILD_VERSION}"
                    }
                }
                
                stage('Test Docker Image') {
                    steps {
                        echo '🧪 Testing Docker image functionality...'
                        script {
                            sh """
                                echo "Testing application in Docker container..."
                                docker run --rm ${DOCKER_IMAGE}:latest
                                
                                echo ""
                                echo "Running unit tests in Docker container..."
                                docker run --rm ${DOCKER_IMAGE}:latest python3 test_app.py
                                
                                echo ""
                                echo "Testing Docker health check..."
                                docker run --rm ${DOCKER_IMAGE}:latest python3 -c "import app; print('Docker health check passed!')"
                            """
                        }
                        echo '✅ Docker image testing completed successfully!'
                    }
                }
                
                stage('Docker Security Scan') {
                    steps {
                        echo '🔒 Performing basic Docker security checks...'
                        script {
                            sh """
                                echo "Checking Docker image details..."
                                docker inspect ${DOCKER_IMAGE}:latest | grep -E '(User|ExposedPorts|Volumes)'
                                
                                echo ""
                                echo "Checking image size..."
                                docker images ${DOCKER_IMAGE}:latest --format "table {{.Repository}}\\t{{.Tag}}\\t{{.Size}}"
                                
                                echo ""
                                echo "Verifying non-root user..."
                                docker run --rm ${DOCKER_IMAGE}:latest whoami
                            """
                        }
                        echo '✅ Docker security checks completed!'
                    }
                }
            }
        }
        
        stage('📊 Generate Reports') {
            steps {
                echo '📊 Generating build reports...'
                script {
                    sh '''
                        echo "=== BUILD REPORT ===" > build-report.txt
                        echo "Build Number: ${BUILD_NUMBER}" >> build-report.txt
                        echo "Build Date: $(date)" >> build-report.txt
                        echo "Python Version: $(python3 --version)" >> build-report.txt
                        echo "Docker Image: ${DOCKER_IMAGE}:${BUILD_VERSION}" >> build-report.txt
                        echo "Git Commit: $(git rev-parse HEAD 2>/dev/null || echo 'N/A')" >> build-report.txt
                        echo "Workspace: ${WORKSPACE}" >> build-report.txt
                        echo "=== END REPORT ===" >> build-report.txt
                        
                        echo "Build report generated:"
                        cat build-report.txt
                    '''
                }
                echo '✅ Build reports generated successfully!'
            }
            post {
                always {
                    archiveArtifacts artifacts: 'build-report.txt', fingerprint: true
                }
            }
        }
    }
    
    post {
        always {
            echo '🏁 Pipeline execution completed!'
            echo '🧹 Performing cleanup operations...'
            
            script {
                // Clean up old Docker images
                sh '''
                    echo "Current Docker images:"
                    docker images | grep ${DOCKER_IMAGE} || true
                    
                    echo "Cleaning up old Docker images (keeping last 5)..."
                    docker images ${DOCKER_IMAGE} --format "{{.Tag}}" | grep -E "^[0-9]+$" | sort -nr | tail -n +6 | xargs -r docker rmi ${DOCKER_IMAGE}: || true
                '''
            }
            
            // Clean workspace
            cleanWs()
            
            echo '=' * 60
            echo '🏁 Jenkins Pipeline Execution Summary:'
            echo "   → Status: ${currentBuild.currentResult}"
            echo "   → Duration: ${currentBuild.durationString}"
            echo "   → Build: #${BUILD_NUMBER}"
            echo '=' * 60
        }
        
        success {
            echo '🎉 PIPELINE COMPLETED SUCCESSFULLY! 🎉'
            echo '✅ All stages passed without errors'
            echo '🚀 Application is ready for deployment!'
            
            // You can add notifications here
            // emailext (
            //     subject: "✅ Build Success: ${env.JOB_NAME} - #${env.BUILD_NUMBER}",
            //     body: "The pipeline completed successfully!",
            //     to: "your-email@example.com"
            // )
        }
        
        failure {
            echo '❌ PIPELINE FAILED!'
            echo '🔍 Please check the console output for error details'
            echo '🛠️  Fix the issues and retry the build'
            
            // You can add failure notifications here
            // emailext (
            //     subject: "❌ Build Failed: ${env.JOB_NAME} - #${env.BUILD_NUMBER}",
            //     body: "The pipeline failed. Please check the logs.",
            //     to: "your-email@example.com"
            // )
        }
        
        unstable {
            echo '⚠️  PIPELINE UNSTABLE'
            echo '📊 Some tests may have failed or there are warnings'
        }
        
        changed {
            echo '🔄 Pipeline status changed from previous build'
        }
    }
}